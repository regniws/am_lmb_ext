#Область ПрограммныйИнтерфейс

// Функция выполняет контроль параметров, описанных в методе ПараметрыПоПрограмме
// Например тут можно описать контроль выбранного загружаемого файла или 
// наличия соответствующего подключения до sql базы
// Параметры:
//   Параметры - Структура - Параметры, описанные в методе ПараметрыПоПрограмме
// Возвращаемое значение:
//   Булево - признак успешности проверенных данных
//
Функция КонтрольПараметровЗагрузки(Параметры) Экспорт
	
	Если ПустаяСтрока(Параметры.ПутьДоТЛС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указан путь до файла загрузки'"),,"ПутьДоТЛС");
		Возврат Ложь;
	ИначеЕсли НЕ КонтрольНаличияФайла(Параметры.ПутьДоТЛС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не найден файл загрукзи'"),,"ПутьДоТЛС");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Метод описывает связку между объектом формы и параметрами, которые необходимы для
// загрузки из внешнего источника
// Параметры:
//   Объект - ДанныеФормыКоллекция - объект обработки ЗагрузкаИзПрограммыЛомбарда
// Возвращаемое значение:
//   Структура - структура с заполненными параметрами для последующей обработки в 
//     ПрочитатьДанные и КонтрольПараметровЗагрузки
Функция ПараметрыПоПрограмме(Объект) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ПутьДоТЛС", Объект.ПутьДоТЛС);
	
	Возврат Параметры;
	
КонецФункции

// Процедура выполняет чтение данных из внешнего источника и заполняет
// реквизиты параметров Параметры.Клиенты, Параметры.Залоги, Параметры.Вещи
// Параметры:
//   Параметры - Структура - содержит описанные в ПараметрыПоПрограмме данные и
//     Параметры.Клиенты, Параметры.Залоги, Параметры.Вещи
//
Процедура ПрочитатьДанные(Параметры) Экспорт
	
	#Если Клиент Тогда
		Состояние(
			НСтр("ru='Чтение данных клиентов'"),
			30,
			НСтр("ru='Идёт вычитка данных клиентов'"),БиблиотекаКартинок.ОжидаемаяДлительнаяОперация48);
	#КонецЕсли
	
	ПрочитатьКлиентов(Параметры.ПутьДоТЛС, Параметры.Клиенты);
	
	#Если Клиент Тогда
		Состояние(
			НСтр("ru='Чтение данных залогов'"),
			60,
			НСтр("ru='Идёт вычитка данных по залогам'"),БиблиотекаКартинок.ОжидаемаяДлительнаяОперация48);
	#КонецЕсли
	
	ПрочитатьЗалоги(Параметры.ПутьДоТЛС, Параметры.Залоги);
	
	#Если Клиент Тогда
		Состояние(
			НСтр("ru='Чтение данных вещей'"),
			90,
			НСтр("ru='Идёт вычитка данных по вещей"),БиблиотекаКартинок.ОжидаемаяДлительнаяОперация48);
	#КонецЕсли
	
	ПрочитатьВещи(Параметры.ПутьДоТЛС, Параметры.Вещи);
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

Функция КонтрольНаличияФайла(Путь)
	Файл = Новый Файл(Путь);
	Возврат Файл.Существует();
КонецФункции

Функция ПрочитатьКлиентов(ПутьДоТЛС, ТаблицаКлиентов)
	
	ф = Новый Файл(ПутьДоТЛС);
	
	АДО = ПодключитьКТЛС(ПутьДоТЛС);
	
	Выборка = АДО.Execute(
	"Select distinct 
	|SENOPA,
	|ZALOGODAT,
	|DATAROZH ,
	|PASPNAL,
//	|NOPKL,
	|KOGDAVYD,
	|KEMVYDAN,
	|KODPODR,
	|ADRNAL,
	|GRAZGD
	|from "+ ф.ИмяБезРасширения + " where TIP = 1" );
	
	ПоляТЛС = МеппингПолейТЛС(Выборка);
	ПоляКлиентов = МеппинКлиентов();
	
	Данные = Выборка.getRows().Выгрузить();
	
	ТаблицаКлиентов.Очистить();
	
	Для Каждого Клиент Из Данные Цикл
		
		стр = ТаблицаКлиентов.Добавить();
		стр.ИДКлиента = Клиент[ПоляТЛС[ПоляКлиентов.ИДКлиента]];
		
		ПрочитатьКлиентовФрагмент(Клиент, ПоляКлиентов, ПоляТЛС, стр);
		стр.ДатаРождения = Клиент[ПоляТЛС[ПоляКлиентов.ДатаРождения]];
		
		Паспорт = Клиент[ПоляТЛС[ПоляКлиентов.ДанныеПаспорта]];
		Паспорт = СтрРазделить(Паспорт,",");
		Паспорт[1] = СтрЗаменить(Паспорт[1], " ", "");
		
		Если Паспорт[0] = "21" Тогда
			Если СтрДлина(Паспорт[1]) <> 10 Тогда
				ДобавитьОшибку(стр, НСтр("ru='Ошибочный паспорт. Длина серии+номер паспорта должна быть равна 10'"));
			Иначе
				стр.СерияПаспорта = Лев(Паспорт[1], 4);
				стр.НомерПаспорта = Прав(Паспорт[1], 6);
				Стр.ВидДокумента = "ПаспортРФ";
			КонецЕсли;
		ИначеЕсли Паспорт[0] = "22" Тогда
			Стр.ВидДокумента = "ИнойДокумент";
			стр.НомерПаспорта = Паспорт[1];
		ИначеЕсли Паспорт[0] = "10" Тогда
			Стр.ВидДокумента = "ИностранныйПаспорт";
			стр.НомерПаспорта = Паспорт[1];
		Иначе
			Стр.ВидДокумента = "ИнойДокумент";
			стр.НомерПаспорта = Паспорт[1];
		КонецЕсли;
		
		стр.ДатаВыдачи = Клиент[ПоляТЛС[ПоляКлиентов.ДатаВыдачи]];
		стр.КемВыдан = Клиент[ПоляТЛС[ПоляКлиентов.КемВыдан]];
		стр.КодПодразделения = Клиент[ПоляТЛС[ПоляКлиентов.КодПодразделения]];
		стр.АдресКлиента = Клиент[ПоляТЛС[ПоляКлиентов.АдресКлиента]];
		стр.Гражданство = Клиент[ПоляТЛС[ПоляКлиентов.Гражданство]];
		стр.Новый = Истина;
		
	КонецЦикла;
	
	ТаблицаКлиентов.Сортировать("Новый убыв, Фамилия, Имя, Отчество");
	
	АДО.Close();
	
КонецФункции

Функция ПрочитатьЗалоги(ПутьДоТЛС, ТаблицаЗалогов)
	
	ф = Новый Файл(ПутьДоТЛС);
	
	АДО = ПодключитьКТЛС(ПутьДоТЛС);
	
	Выборка = АДО.Execute(
	"Select 
	|DATZ,
	|OTDEL,
	|SENOPA,
	|KREDIT,
	|OCEN, 
	|BAZBIL, 
	|DATW,
	|KD
	|from "+ ф.ИмяБезРасширения + " where TIP = 1" );
	
	ПоляТЛС = МеппингПолейТЛС(Выборка);
	ПоляЗалогов = МеппингЗалогов();
	
	Данные = Выборка.getRows().Выгрузить();
	
	ТаблицаЗалогов.Очистить();
	
	Для Каждого Залог Из Данные Цикл
		
		стр = ТаблицаЗалогов.Добавить();
		
		стр.Номер = Залог[ПоляТЛС[ПоляЗалогов.Отделение]] + Залог[ПоляТЛС[ПоляЗалогов.Номер]];
		стр.ИдентификаторЗалога = стр.Номер;
		стр.Дата = Залог[ПоляТЛС[ПоляЗалогов.Дата]];
		стр.Клиент= Залог[ПоляТЛС[ПоляЗалогов.Клиент]];
		стр.СуммаЗама= Залог[ПоляТЛС[ПоляЗалогов.СуммаЗайма]];
		стр.Срок = Залог[ПоляТЛС[ПоляЗалогов.Срок]];;
		стр.ДатаВыкупа= Залог[ПоляТЛС[ПоляЗалогов.ДатаВыкупа]];
		стр.Оценка= Залог[ПоляТЛС[ПоляЗалогов.Оценка]];
		стр.Новый = Истина;
	КонецЦикла;
	
	АДО.Close();
	
КонецФункции

Функция ПрочитатьВещи(ПутьДоТЛС, ТаблицаВещей)
	
	ф = Новый Файл(ПутьДоТЛС);
	
	АДО = ПодключитьКТЛС(ПутьДоТЛС);
	
	Выборка = АДО.Execute(
	"Select 
	|BAZBIL,
	|OTDEL,
	|OPV,
	|OCEN,
	|OKPD2,
	|PUREWEIGHT,
	|WEIGHT,
	|METAL,
	|HALLMARK
	|from "+ ф.ИмяБезРасширения + " where TIP = 1" );
	
	ПоляТЛС = МеппингПолейТЛС(Выборка);
	МеппингВещей = МеппингВещей();
	
	Данные = Выборка.getRows().Выгрузить();
	
	ТаблицаВещей.Очистить();
	
	Для Каждого Залог Из Данные Цикл
		
		стр = ТаблицаВещей.Добавить();
		стр.ИдентификаторЗалога = Залог[ПоляТЛС[МеппингВещей.Отделение]] + Залог[ПоляТЛС[МеппингВещей.Номер]];
		стр.ИдентификаторВещи = стр.ИдентификаторЗалога +  "/1";
		стр.Наименование = стр.ИдентификаторЗалога + "/" + Залог[ПоляТЛС[МеппингВещей.Наименование]];
		стр.Оценка= Залог[ПоляТЛС[МеппингВещей.Оценка]];
		стр.ТипПартии = ПредопределенноеЗначение("Перечисление.ТипыПартии.PRODUCT");
		// совсем совсем неизвестно
		стр.ОКПД2 = Залог[ПоляТЛС[МеппингВещей.ОКПД2]];;
		стр.ОбщийВес = Залог[ПоляТЛС[МеппингВещей.ОбщийВес]];;
		стр.ЧистыйВес = Залог[ПоляТЛС[МеппингВещей.Чистыйвес]];;
		стр.Металл = ПредопределенноеЗначение("Перечисление.Металлы."+ Залог[ПоляТЛС[МеппингВещей.Металл]]);
		стр.Проба = Залог[ПоляТЛС[МеппингВещей.Проба]];
		
		стр.Новый = Истина;
		
	КонецЦикла;
	
	АДО.Close();
	
КонецФункции

Функция ПодключитьКТЛС(Знач ПутьДоТЛС)
	
	ф = Новый Файл(ПутьДоТЛС);
	
	АДО = Новый COMОбъект("ADODB.Connection");
	АДО.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	"Data Source=" + ф.Путь + ";" +
	"Extended Properties=""DBASE IV;"";");
	Возврат Адо;
	
КонецФункции

Процедура ПрочитатьКлиентовФрагмент(Клиент, ПоляКлиентов, ПоляТЛС, стр)
	
	ФИО = СтрРазделить(Клиент[ПоляТЛС[ПоляКлиентов.ФИО]]," ");
	
	Если ФИО.Количество() < 2 Тогда
		стр.Фамилия = ТРег(ФИО[0]);
		ДобавитьОшибку(стр, НСтр("ru='Нет данных по фио клиента, меньше двух слов'"));
		Возврат;
	КонецЕсли;
	
	стр.Фамилия = ТРег(ФИО[0]);
	стр.Имя = ТРег(ФИО[1]);
	
	Если ФИО.Количество() = 3 Тогда
		стр.Отчество = ТРег(ФИО[2]);
	КонецЕсли;
	Если ФИО.Количество() = 4 Тогда
		стр.Отчество = ТРег(ФИО[3]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибку(Стр, Ошибка)
	Стр.ОписаниеОшибки = Стр.ОписаниеОшибки  + Ошибка + Символы.ПС ;
	Стр.ОшибкаОбработки = Истина;
КонецПроцедуры

Функция МеппинКлиентов()
	
	т = Новый Структура();
	
	т.Вставить("ИДКлиента","SENOPA");
	т.Вставить("ФИО","ZALOGODAT");
	
	т.Вставить("ДатаРождения","DATAROZH");
	т.Вставить("ДанныеПаспорта","PASPNAL");
	т.Вставить("ДатаВыдачи","KOGDAVYD");
	т.Вставить("КемВыдан","KEMVYDAN");
	т.Вставить("КодПодразделения","KODPODR");
	т.Вставить("АдресКлиента","ADRNAL");
	т.Вставить("Гражданство","GRAZGD");
	
	Возврат т;
	
КонецФункции 

Функция МеппингЗалогов()
	
	т = Новый Структура();
	
	т.Вставить("Номер","BAZBIL");
	т.Вставить("Отделение","OTDEL");
	т.Вставить("Дата","DATZ");
	т.Вставить("Клиент","SENOPA");
	т.Вставить("СуммаЗайма","KREDIT");
	т.Вставить("Срок","KD");
	т.Вставить("ДатаВыкупа","DATW");
	т.Вставить("Оценка","OCEN");
	
	Возврат т;
	
КонецФункции

Функция МеппингВещей()
	
	т = Новый Структура();
	
	т.Вставить("Номер","BAZBIL");
	т.Вставить("Отделение","OTDEL");
	т.Вставить("Наименование","OPV");
	т.Вставить("Оценка","OCEN");
	
	т.Вставить("ОКПД2","OKPD2");
	т.Вставить("ЧистыйВес","PUREWEIGHT");
	т.Вставить("ОбщийВес","WEIGHT");
	т.Вставить("Металл","METAL");
	т.Вставить("Проба","HALLMARK");
	
	Возврат т;
	
КонецФункции

Функция МеппингПолейТЛС(Выборка)
	
	т = Новый Соответствие;
	
	Для к = 0 По Выборка.fields.Count - 1 Цикл
		т.Вставить(Выборка.fields.Item(к).Name, к);
	КонецЦикла;
	
	Возврат т;
	
КонецФункции

#КонецОбласти
